// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Mars_Project.Feature
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::NUnit.Framework.TestFixtureAttribute()]
    [global::NUnit.Framework.DescriptionAttribute("Manage Languages")]
    [global::NUnit.Framework.FixtureLifeCycleAttribute(global::NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class ManageLanguagesFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Feature", "Manage Languages", "  As a user\n  I want to add, edit, delete and cancel languages\n  So that my profi" +
                "le is updated", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "language.feature"
#line hidden
        
        [global::NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [global::NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::NUnit.Framework.TestContext>(global::NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Feature/language.feature", 14);
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("1. Add language Validation")]
        [global::NUnit.Framework.TestCaseAttribute("English", "Basic", "added", "0", null)]
        [global::NUnit.Framework.TestCaseAttribute("Spanish", "Conversational", "added", "1", null)]
        [global::NUnit.Framework.TestCaseAttribute("", "Basic", "Please enter", "2", null)]
        [global::NUnit.Framework.TestCaseAttribute("Spanish", "", "Please enter", "3", null)]
        [global::NUnit.Framework.TestCaseAttribute("English", "Basic", "This language is already exist in your language list.", "4", null)]
        [global::NUnit.Framework.TestCaseAttribute("English", "Conversational", "Duplicated data", "5", null)]
        [global::NUnit.Framework.TestCaseAttribute("@@1232424@", "Basic", "added", "6", null)]
        [global::NUnit.Framework.TestCaseAttribute("LooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName wi" +
            "th extra character", "Conversational", "added", "7", null)]
        public async global::System.Threading.Tasks.Task _1_AddLanguageValidation(string language, string level, string expectedMessage, string @__pickleIndex, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("language", language);
            argumentsOfScenario.Add("level", level);
            argumentsOfScenario.Add("expectedMessage", expectedMessage);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("1. Add language Validation", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 6
  this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
    await testRunner.GivenAsync("I am logged into the application for languages", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.WhenAsync(string.Format("I add a new language \"{0}\" with level \"{1}\"", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
    await testRunner.ThenAsync(string.Format("I should see \"{0}\"", expectedMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("2. Maximum of 4 language")]
        public async global::System.Threading.Tasks.Task _2_MaximumOf4Language()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "8";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("2. Maximum of 4 language", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 22
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
  await testRunner.GivenAsync("I am logged into the application for languages", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
    await testRunner.WhenAsync("I try to add another language \"French\" with level \"Basic\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
    await testRunner.ThenAsync("I should not be able to see the Add Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("3. Edit an existing language")]
        public async global::System.Threading.Tasks.Task _3_EditAnExistingLanguage()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "9";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("3. Edit an existing language", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 27
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
    await testRunner.GivenAsync("I am logged into the application for languages", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
    await testRunner.WhenAsync("I edit a language", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
    await testRunner.ThenAsync("the language should be updated successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("4. Delete a language")]
        public async global::System.Threading.Tasks.Task _4_DeleteALanguage()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "10";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("4. Delete a language", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 32
  this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
    await testRunner.GivenAsync("I am logged into the application for languages", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
    await testRunner.WhenAsync("I delete a language", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
    await testRunner.ThenAsync("the language should be removed successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("5. Cancel a language")]
        public async global::System.Threading.Tasks.Task _5_CancelALanguage()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "11";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("5. Cancel a language", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 37
  this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
    await testRunner.GivenAsync("I am logged into the application for languages", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
    await testRunner.WhenAsync("I Cancel a language", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
    await testRunner.ThenAsync("the language should not be updated successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
